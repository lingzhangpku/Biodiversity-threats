%% ================================
%  Build nested threat → sector mapping
%  Convert the threat codes listed for each species into a structured mapping between threats and economic sectors.
% =================================

data_threat = df1_threats; % threat data

% Preallocate two columns to store per-row nested lists (n×2 cell matrices)
data_threat.sectors_pre2010  = cell(height(data_threat), 1);
data_threat.sectors_post2010 = cell(height(data_threat), 1);

% -------- Split pre-2010 codes row by row into column vectors --------
for i = 1:height(data_threat)
    x = data_threat.threat_pre2010_num{i};   % may be empty
    if ~isempty(x)
        data_threat.sectors_pre2010{i} = strsplit(x, ',')';
    else
        data_threat.sectors_pre2010{i} = {};
    end
end

% -------- Split post-2010 codes row by row into column vectors --------
for i = 1:height(data_threat)
    x = data_threat.threat_post2010_num{i};
    if ~isempty(x)
        data_threat.sectors_post2010{i} = strsplit(x, ',')';
    else
        data_threat.sectors_post2010{i} = {};
    end
end

% -------- Define a threat-code → sector-codes mapping table --------
threat_classify = containers.Map(...
    {'Housing & urban areas', 'Commercial & industrial areas', 'Tourism & recreation areas', ...
    'Annual & perennial non-timber crops', 'Wood & pulp plantations', 'Livestock farming & ranching', ...
    'Marine & freshwater aquaculture', 'Oil & gas drilling', 'Mining & quarrying', 'Renewable energy', ...
    'Roads & railroads', 'Utility & service lines', 'Shipping lanes', 'Flight paths', ...
    'Hunting & trapping terrestrial animals', 'Gathering terrestrial plants', 'Logging & wood harvesting', ...
    'Fishing & harvesting aquatic resources', 'Recreational activities', 'War, civil unrest & military exercises', ...
    'Work & other activities', 'Fire & fire suppression', 'Dams & water management/use', ...
    'Other ecosystem modifications', 'Domestic & urban waste water', 'Industrial & military effluents', ...
    'Agricultural & forestry effluents', 'Garbage & solid waste', 'Air-borne pollutants', 'Excess energy', ...
    'Habitat shifting & alteration', 'Droughts', 'Temperature extremes', 'Storms & flooding', ...
    'Other threat', 'Other impacts', 'Invasive non-native/alien species/diseases', ...
    'Problematic native species/diseases', 'Problematic species/disease of unknown origin', 'Other ecosystem modifications'}, ...
    {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...
    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 35, 36, 37, 38, 35});

% Keys are threat codes (strings), values are comma-separated sector code strings.
correspondenceMap = containers.Map( ...
    {'1','2','3','4','5','6','7','8','9','10', ...
     '11','12','13','14','15','16','17','18','19','20', ...
     '21','22','23','24','25','26','27','28','29','30', ...
     '31','32','33','34','35','36','37','38'}, ...
    {'14,18,24', ...
     '4,5,6,7,8,9,10,11,12,13,14,15,16,17,20,21', ...
     '23', ...
     '1', ...
     '1', ...
     '1', ...
     '2', ...
     '3', ...
     '3', ...
     '12,13', ...
     '19', ...
     '19,2,22', ...
     '19,2', ...
     '19,2', ...
     '1', ...
     '1', ...
     '1', ...
     '2', ...
     '23', ...
     '22', ...
     '23', ...
     '1', ...
     '13,14,15', ...
     '14', ...
     '12,13,24', ...
     '3,4,5,6,7,8,9,10,11,12', ...
     '1', ...
     '3,4,5,6,7,8,9,10,11', ...
     '3,4,5,6,7,8,9,10,11,14,15,23,24', ...
     '4,5,6,7,8,9,10,11,13,23,24', ...
     '1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26', ...
     '1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26', ...
     '1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26', ...
     '1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26', ...
     '1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26', ...
     '1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26', ...
     '1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26', ...
     '1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26'} );

% -------- Map pre-2010 threat codes to sector codes (store in column 2) --------
for i = 1:height(data_threat)
    codes_cell = data_threat.sectors_pre2010{i,1};  
    for j = 1:numel(codes_cell)
        currentCell = codes_cell(j);
        if ismissing(currentCell) || isempty(currentCell)
            data_threat.sectors_pre2010{i,1}{j,2} = '';
            continue;
        end
        currentValue = currentCell[1]; 
        currentValue = currentCell{1};
        if isKey(correspondenceMap, currentValue)
            data_threat.sectors_pre2010{i,1}{j,2} = correspondenceMap(currentValue);
        else
            data_threat.sectors_pre2010{i,1}{j,2} = '';
        end
    end
end

% -------- Map post-2010 threat codes to sector codes (store in column 2) --------
for i = 1:height(data_threat)
    codes_cell = data_threat.sectors_post2010{i,1};
    for j = 1:numel(codes_cell)
        currentCell = codes_cell(j);
        if ismissing(currentCell) || isempty(currentCell)
            data_threat.sectors_post2010{i,1}{j,2} = '';
            continue;
        end
        currentValue = currentCell{1};
        if isKey(correspondenceMap, currentValue)
            data_threat.sectors_post2010{i,1}{j,2} = correspondenceMap(currentValue);
        else
            data_threat.sectors_post2010{i,1}{j,2} = '';
        end
    end
end
